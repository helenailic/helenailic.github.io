(self["webpackChunktportal_assets"] = self["webpackChunktportal_assets"] || []).push([[5072,2348],{

/***/ 6876:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "$"
var external_$_ = __webpack_require__(18592);
var external_$_default = /*#__PURE__*/__webpack_require__.n(external_$_);
// EXTERNAL MODULE: ./node_modules/jquery-ujs/src/rails.js
var rails = __webpack_require__(60881);
// EXTERNAL MODULE: ./node_modules/moment/moment.js
var moment = __webpack_require__(17412);
var moment_default = /*#__PURE__*/__webpack_require__.n(moment);
// EXTERNAL MODULE: ./vendor/bundle/ruby/3.2.0/gems/client_side_validations-20.0.2/vendor/assets/javascripts/rails.validations.js
var rails_validations = __webpack_require__(9315);
;// CONCATENATED MODULE: ./app/javascript/components/topbar.ts
// @ts-nocheck
function toggleShadow(){external_$_default()('.js-topbar').toggleClass('is-not-on-top',external_$_default()(window).scrollTop()>0);}function initialize(){external_$_default()(window).on('scroll',toggleShadow);toggleShadow();external_$_default()('.js-menu-toggle').on('click',function(e){e.preventDefault();external_$_default()('.js-page-layout').toggleClass('is-navigating');external_$_default()(document.body).toggleClass('is-not-scrollable');});}/* harmony default export */ var topbar = ({init:initialize});
;// CONCATENATED MODULE: ./app/javascript/components/upcoming_payments.ts
// @ts-nocheck
function SkipAutoPayment(cardSelector){var skipping=false;external_$_default()(cardSelector).on('click','.js-skip-next-occurrence',function(e){if(!skipping){skipping=true;var $this=external_$_default()(this);var url=$this.data('url');e.preventDefault();external_$_default().ajax({url:url,method:'post',dataType:'json'}).done(function(data){skipping=false;$this.closest('.js-auto-payment').replaceWith(data.skipped_payment_html);var table=external_$_default()('.js-past-payments-table');table.prepend(data.skipped_past_payment_html);if(table.hasClass('u-hidden')){table.removeClass('u-hidden');external_$_default()('.js-no-past-payments').addClass('u-hidden');}}).error(function(){skipping=false;});}});}/* harmony default export */ var upcoming_payments = (SkipAutoPayment);
;// CONCATENATED MODULE: ./app/javascript/components/help_bubble_accessibility_handler.ts
// @ts-nocheck
function HelpBubbleAccessibilityHandler(selector){external_$_default()(selector).on('keypress','.js-help-bubble',function(e){if(e.keyCode===32||e.keyCode===13){e.preventDefault();external_$_default()(this).trigger('click');}});}/* harmony default export */ var help_bubble_accessibility_handler = (HelpBubbleAccessibilityHandler);
;// CONCATENATED MODULE: ./app/javascript/components/legal_document_handler.ts
// @ts-nocheck
function openLegalDocument(url){var options='width=700,height=800,menubar=false,status=false,toolbar=false,directories=false,scrollbars=yes';var termsWindow=window.open(url,'legal_document',options);termsWindow.moveTo(200,100);}function LegalDocumentHandler(){external_$_default()(document).on('click','.js-open-legal-document',function(e){e.preventDefault();openLegalDocument(this.href);});}/* harmony default export */ var legal_document_handler = (LegalDocumentHandler);
;// CONCATENATED MODULE: ./app/javascript/components/revealer.ts
// @ts-nocheck
function Revealer(selector){var self=this;external_$_default()(selector).find('.js-revealable').each(function(){var $this=external_$_default()(this);$this.on('click','.js-reveal-item',function(e){e.preventDefault();self.showMoreItems($this);});});}Revealer.prototype.showMoreItems=function(selector){var hidden=external_$_default()(selector).find('.is-hidden');hidden.slice(0,3).removeClass('is-hidden');var num_hidden=external_$_default()(selector).find('.is-hidden').size();var num_total=external_$_default()(selector).find('.js-total-number').text();external_$_default()(selector).find('.js-revealed-number').text(num_total-num_hidden);if(num_hidden==0)external_$_default()(selector).find('.js-reveal-item').addClass('is-hidden');};/* harmony default export */ var revealer = (Revealer);
;// CONCATENATED MODULE: ./app/javascript/components/mobile_app.ts
// @ts-nocheck
function addMobileSpecificClass(){document.querySelector('body').classList.add('is-in-mobile-app');}function nativePostMessage(data){return window.ReactNativeWebView?window.ReactNativeWebView.postMessage(data):window.postMessage(data);}function sendPostMessageOnLogout(){document.querySelectorAll('.js-logout, .js-log-out-link').forEach(function(logoutLink){logoutLink.addEventListener('click',function(e){e.preventDefault();e.stopPropagation();var action=JSON.stringify({type:'LOGOUT'});nativePostMessage(action);});});}function sendPostMessageOnUnitChange(){document.querySelectorAll('.js-switch-unit-button-link').forEach(function(unitLink){var unitUrl=unitLink.href;unitLink.addEventListener('click',function(){var action=JSON.stringify({type:'SWITCH_UNIT',payload:{unitUrl:unitUrl}});nativePostMessage(action);});});}function addPmSessionLogoutWarning(){document.querySelectorAll('.js-logout-disabled').forEach(function(disabledLogoutLink){disabledLogoutLink.addEventListener('click',function(){window.alert('As a property manager, you cannot logout of the online portal.');});});}function mobileAppInitializer(){var userAgent=window.navigator.userAgent;var isUsingMobileApp=userAgent.includes('ResidentMobileApp')||userAgent.includes('APMMobileApp');if(isUsingMobileApp){sendPostMessageOnLogout();addMobileSpecificClass();sendPostMessageOnUnitChange();addPmSessionLogoutWarning();}}/* harmony default export */ var mobile_app = (mobileAppInitializer);
;// CONCATENATED MODULE: ./app/javascript/packs/application.ts
// @ts-nocheck
new help_bubble_accessibility_handler(document);new legal_document_handler();new revealer(document);new mobile_app();external_$_default()(function enableBootstrapTooltips(){var selector=external_$_default()('[data-bs-toggle="tooltip"]');if(selector.length>0)selector.tooltip();});external_$_default()(function enableBootstrapPopovers(){var popovers=[].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));popovers.map(function(popover){// If using touchscreen device, popovers cannot have a "hover" trigger
if(window.hasOwnProperty('ontouchstart')){return new bootstrap.Popover(popover,{trigger:'focus'});}return new bootstrap.Popover(popover);});});window.$=(external_$_default());window.moment=(moment_default());window.SkipAutoPayment=upcoming_payments;window.Topbar=topbar;topbar.init();

/***/ }),

/***/ 92348:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var map = {
	"./af": 36024,
	"./af.js": 36024,
	"./ar": 27544,
	"./ar-dz": 11736,
	"./ar-dz.js": 11736,
	"./ar-kw": 47888,
	"./ar-kw.js": 47888,
	"./ar-ly": 45272,
	"./ar-ly.js": 45272,
	"./ar-ma": 89688,
	"./ar-ma.js": 89688,
	"./ar-sa": 44948,
	"./ar-sa.js": 44948,
	"./ar-tn": 61992,
	"./ar-tn.js": 61992,
	"./ar.js": 27544,
	"./az": 95777,
	"./az.js": 95777,
	"./be": 69940,
	"./be.js": 69940,
	"./bg": 86107,
	"./bg.js": 86107,
	"./bm": 63544,
	"./bm.js": 63544,
	"./bn": 94952,
	"./bn-bd": 92876,
	"./bn-bd.js": 92876,
	"./bn.js": 94952,
	"./bo": 56576,
	"./bo.js": 56576,
	"./br": 7392,
	"./br.js": 7392,
	"./bs": 43584,
	"./bs.js": 43584,
	"./ca": 17396,
	"./ca.js": 17396,
	"./cs": 91800,
	"./cs.js": 91800,
	"./cv": 67716,
	"./cv.js": 67716,
	"./cy": 70956,
	"./cy.js": 70956,
	"./da": 37568,
	"./da.js": 37568,
	"./de": 78960,
	"./de-at": 52131,
	"./de-at.js": 52131,
	"./de-ch": 46128,
	"./de-ch.js": 46128,
	"./de.js": 78960,
	"./dv": 43284,
	"./dv.js": 43284,
	"./el": 32972,
	"./el.js": 32972,
	"./en-au": 64356,
	"./en-au.js": 64356,
	"./en-ca": 28440,
	"./en-ca.js": 28440,
	"./en-gb": 2448,
	"./en-gb.js": 2448,
	"./en-ie": 16320,
	"./en-ie.js": 16320,
	"./en-il": 74360,
	"./en-il.js": 74360,
	"./en-in": 80632,
	"./en-in.js": 80632,
	"./en-nz": 81140,
	"./en-nz.js": 81140,
	"./en-sg": 85384,
	"./en-sg.js": 85384,
	"./eo": 65620,
	"./eo.js": 65620,
	"./es": 32348,
	"./es-do": 76528,
	"./es-do.js": 76528,
	"./es-mx": 98544,
	"./es-mx.js": 98544,
	"./es-us": 71208,
	"./es-us.js": 71208,
	"./es.js": 32348,
	"./et": 20373,
	"./et.js": 20373,
	"./eu": 69912,
	"./eu.js": 69912,
	"./fa": 74984,
	"./fa.js": 74984,
	"./fi": 52819,
	"./fi.js": 52819,
	"./fil": 72512,
	"./fil.js": 72512,
	"./fo": 40952,
	"./fo.js": 40952,
	"./fr": 8405,
	"./fr-ca": 70839,
	"./fr-ca.js": 70839,
	"./fr-ch": 45720,
	"./fr-ch.js": 45720,
	"./fr.js": 8405,
	"./fy": 58116,
	"./fy.js": 58116,
	"./ga": 9916,
	"./ga.js": 9916,
	"./gd": 86908,
	"./gd.js": 86908,
	"./gl": 54088,
	"./gl.js": 54088,
	"./gom-deva": 15064,
	"./gom-deva.js": 15064,
	"./gom-latn": 96300,
	"./gom-latn.js": 96300,
	"./gu": 51208,
	"./gu.js": 51208,
	"./he": 672,
	"./he.js": 672,
	"./hi": 648,
	"./hi.js": 648,
	"./hr": 38864,
	"./hr.js": 38864,
	"./hu": 28164,
	"./hu.js": 28164,
	"./hy-am": 62528,
	"./hy-am.js": 62528,
	"./id": 63400,
	"./id.js": 63400,
	"./is": 23912,
	"./is.js": 23912,
	"./it": 77088,
	"./it-ch": 77988,
	"./it-ch.js": 77988,
	"./it.js": 77088,
	"./ja": 52501,
	"./ja.js": 52501,
	"./jv": 40376,
	"./jv.js": 40376,
	"./ka": 67048,
	"./ka.js": 67048,
	"./kk": 56416,
	"./kk.js": 56416,
	"./km": 58288,
	"./km.js": 58288,
	"./kn": 84833,
	"./kn.js": 84833,
	"./ko": 33352,
	"./ko.js": 33352,
	"./ku": 76376,
	"./ku.js": 76376,
	"./ky": 92832,
	"./ky.js": 92832,
	"./lb": 61448,
	"./lb.js": 61448,
	"./lo": 34116,
	"./lo.js": 34116,
	"./lt": 20296,
	"./lt.js": 20296,
	"./lv": 76136,
	"./lv.js": 76136,
	"./me": 28019,
	"./me.js": 28019,
	"./mi": 41320,
	"./mi.js": 41320,
	"./mk": 47720,
	"./mk.js": 47720,
	"./ml": 81228,
	"./ml.js": 81228,
	"./mn": 49564,
	"./mn.js": 49564,
	"./mr": 56116,
	"./mr.js": 56116,
	"./ms": 88512,
	"./ms-my": 69676,
	"./ms-my.js": 69676,
	"./ms.js": 88512,
	"./mt": 29824,
	"./mt.js": 29824,
	"./my": 82792,
	"./my.js": 82792,
	"./nb": 23444,
	"./nb.js": 23444,
	"./ne": 77860,
	"./ne.js": 77860,
	"./nl": 39940,
	"./nl-be": 63760,
	"./nl-be.js": 63760,
	"./nl.js": 39940,
	"./nn": 28888,
	"./nn.js": 28888,
	"./oc-lnc": 18096,
	"./oc-lnc.js": 18096,
	"./pa-in": 78837,
	"./pa-in.js": 78837,
	"./pl": 35904,
	"./pl.js": 35904,
	"./pt": 96840,
	"./pt-br": 11048,
	"./pt-br.js": 11048,
	"./pt.js": 96840,
	"./ro": 33060,
	"./ro.js": 33060,
	"./ru": 3156,
	"./ru.js": 3156,
	"./sd": 96595,
	"./sd.js": 96595,
	"./se": 94560,
	"./se.js": 94560,
	"./si": 38668,
	"./si.js": 38668,
	"./sk": 69500,
	"./sk.js": 69500,
	"./sl": 90024,
	"./sl.js": 90024,
	"./sq": 84192,
	"./sq.js": 84192,
	"./sr": 56832,
	"./sr-cyrl": 36348,
	"./sr-cyrl.js": 36348,
	"./sr.js": 56832,
	"./ss": 28692,
	"./ss.js": 28692,
	"./sv": 63252,
	"./sv.js": 63252,
	"./sw": 98904,
	"./sw.js": 98904,
	"./ta": 71120,
	"./ta.js": 71120,
	"./te": 46688,
	"./te.js": 46688,
	"./tet": 59556,
	"./tet.js": 59556,
	"./tg": 69248,
	"./tg.js": 69248,
	"./th": 27172,
	"./th.js": 27172,
	"./tk": 30208,
	"./tk.js": 30208,
	"./tl-ph": 91744,
	"./tl-ph.js": 91744,
	"./tlh": 331,
	"./tlh.js": 331,
	"./tr": 43920,
	"./tr.js": 43920,
	"./tzl": 84360,
	"./tzl.js": 84360,
	"./tzm": 97524,
	"./tzm-latn": 81732,
	"./tzm-latn.js": 81732,
	"./tzm.js": 97524,
	"./ug-cn": 48743,
	"./ug-cn.js": 48743,
	"./uk": 69328,
	"./uk.js": 69328,
	"./ur": 88968,
	"./ur.js": 88968,
	"./uz": 51516,
	"./uz-latn": 19388,
	"./uz-latn.js": 19388,
	"./uz.js": 51516,
	"./vi": 59664,
	"./vi.js": 59664,
	"./x-pseudo": 68616,
	"./x-pseudo.js": 68616,
	"./yo": 85436,
	"./yo.js": 85436,
	"./zh-cn": 3820,
	"./zh-cn.js": 3820,
	"./zh-hk": 60112,
	"./zh-hk.js": 60112,
	"./zh-mo": 99504,
	"./zh-mo.js": 99504,
	"./zh-tw": 38040,
	"./zh-tw.js": 38040
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 92348;

/***/ }),

/***/ 9315:
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Client Side Validations JS - v0.3.0 (https://github.com/DavyJonesLocker/client_side_validations)
 * Copyright (c) 2021 Geremia Taglialatela, Brian Cardarella
 * Licensed under MIT (https://opensource.org/licenses/mit-license.php)
 */

(function (global, factory) {
   true ? module.exports = factory(__webpack_require__(18592)) :
  0;
})(this, (function (jQuery) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var jQuery__default = /*#__PURE__*/_interopDefaultLegacy(jQuery);

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  var ClientSideValidations = {
    callbacks: {
      element: {
        after: function after($element, eventData) {},
        before: function before($element, eventData) {},
        fail: function fail($element, message, addError, eventData) {
          return addError();
        },
        pass: function pass($element, removeError, eventData) {
          return removeError();
        }
      },
      form: {
        after: function after($form, eventData) {},
        before: function before($form, eventData) {},
        fail: function fail($form, eventData) {},
        pass: function pass($form, eventData) {}
      }
    },
    eventsToBind: {
      form: function form(_form, $form) {
        return {
          'submit.ClientSideValidations': function submitClientSideValidations(eventData) {
            if (!$form.isValid(_form.ClientSideValidations.settings.validators)) {
              eventData.preventDefault();
              eventData.stopImmediatePropagation();
            }
          },
          'ajax:beforeSend.ClientSideValidations': function ajaxBeforeSendClientSideValidations(eventData) {
            if (eventData.target === this) {
              $form.isValid(_form.ClientSideValidations.settings.validators);
            }
          },
          'form:validate:after.ClientSideValidations': function formValidateAfterClientSideValidations(eventData) {
            ClientSideValidations.callbacks.form.after($form, eventData);
          },
          'form:validate:before.ClientSideValidations': function formValidateBeforeClientSideValidations(eventData) {
            ClientSideValidations.callbacks.form.before($form, eventData);
          },
          'form:validate:fail.ClientSideValidations': function formValidateFailClientSideValidations(eventData) {
            ClientSideValidations.callbacks.form.fail($form, eventData);
          },
          'form:validate:pass.ClientSideValidations': function formValidatePassClientSideValidations(eventData) {
            ClientSideValidations.callbacks.form.pass($form, eventData);
          }
        };
      },
      input: function input(form) {
        return {
          'focusout.ClientSideValidations': function focusoutClientSideValidations() {
            jQuery__default["default"](this).isValid(form.ClientSideValidations.settings.validators);
          },
          'change.ClientSideValidations': function changeClientSideValidations() {
            jQuery__default["default"](this).data('changed', true);
          },
          'element:validate:after.ClientSideValidations': function elementValidateAfterClientSideValidations(eventData) {
            ClientSideValidations.callbacks.element.after(jQuery__default["default"](this), eventData);
          },
          'element:validate:before.ClientSideValidations': function elementValidateBeforeClientSideValidations(eventData) {
            ClientSideValidations.callbacks.element.before(jQuery__default["default"](this), eventData);
          },
          'element:validate:fail.ClientSideValidations': function elementValidateFailClientSideValidations(eventData, message) {
            var $element = jQuery__default["default"](this);
            ClientSideValidations.callbacks.element.fail($element, message, function () {
              form.ClientSideValidations.addError($element, message);
            }, eventData);
          },
          'element:validate:pass.ClientSideValidations': function elementValidatePassClientSideValidations(eventData) {
            var $element = jQuery__default["default"](this);
            ClientSideValidations.callbacks.element.pass($element, function () {
              form.ClientSideValidations.removeError($element);
            }, eventData);
          }
        };
      },
      inputConfirmation: function inputConfirmation($element, form) {
        return {
          'focusout.ClientSideValidations': function focusoutClientSideValidations() {
            $element.data('changed', true).isValid(form.ClientSideValidations.settings.validators);
          },
          'keyup.ClientSideValidations': function keyupClientSideValidations() {
            $element.data('changed', true).isValid(form.ClientSideValidations.settings.validators);
          }
        };
      }
    },
    enablers: {
      form: function form(_form2) {
        var $form = jQuery__default["default"](_form2);
        _form2.ClientSideValidations = {
          settings: $form.data('clientSideValidations'),
          addError: function addError($element, message) {
            return ClientSideValidations.formBuilders[_form2.ClientSideValidations.settings.html_settings.type].add($element, _form2.ClientSideValidations.settings.html_settings, message);
          },
          removeError: function removeError($element) {
            return ClientSideValidations.formBuilders[_form2.ClientSideValidations.settings.html_settings.type].remove($element, _form2.ClientSideValidations.settings.html_settings);
          }
        };
        var eventsToBind = ClientSideValidations.eventsToBind.form(_form2, $form);

        for (var eventName in eventsToBind) {
          var eventFunction = eventsToBind[eventName];
          $form.on(eventName, eventFunction);
        }

        $form.find(ClientSideValidations.selectors.inputs).each(function () {
          ClientSideValidations.enablers.input(this);
        });
      },
      input: function input(_input) {
        var $input = jQuery__default["default"](_input);
        var form = _input.form;
        var $form = jQuery__default["default"](form);
        var eventsToBind = ClientSideValidations.eventsToBind.input(form);

        for (var eventName in eventsToBind) {
          var eventFunction = eventsToBind[eventName];
          $input.filter(':not(:radio):not([id$=_confirmation])').each(function () {
            jQuery__default["default"](this).attr('data-validate', true);
          }).on(eventName, eventFunction);
        }

        $input.filter(':checkbox').on('change.ClientSideValidations', function () {
          jQuery__default["default"](this).isValid(form.ClientSideValidations.settings.validators);
        });
        $input.filter('[id$=_confirmation]').each(function () {
          var $element = jQuery__default["default"](this);
          var $elementToConfirm = $form.find("#".concat(this.id.match(/(.+)_confirmation/)[1], ":input"));

          if ($elementToConfirm.length) {
            var _eventsToBind = ClientSideValidations.eventsToBind.inputConfirmation($elementToConfirm, form);

            for (var _eventName in _eventsToBind) {
              var _eventFunction = _eventsToBind[_eventName];
              jQuery__default["default"]("#".concat($element.attr('id'))).on(_eventName, _eventFunction);
            }
          }
        });
      }
    },
    formBuilders: {
      'ActionView::Helpers::FormBuilder': {
        add: function add($element, settings, message) {
          var $form = jQuery__default["default"]($element[0].form);

          if ($element.data('valid') !== false && $form.find("label.message[for=\"".concat($element.attr('id'), "\"]"))[0] == null) {
            var $inputErrorField = jQuery__default["default"](settings.input_tag);
            var $labelErrorField = jQuery__default["default"](settings.label_tag);
            var $label = $form.find("label[for=\"".concat($element.attr('id'), "\"]:not(.message)"));

            if ($element.attr('autofocus')) {
              $element.attr('autofocus', false);
            }

            $element.before($inputErrorField);
            $inputErrorField.find('span#input_tag').replaceWith($element);
            $inputErrorField.find('label.message').attr('for', $element.attr('id'));
            $labelErrorField.find('label.message').attr('for', $element.attr('id'));
            $labelErrorField.insertAfter($label);
            $labelErrorField.find('label#label_tag').replaceWith($label);
          }

          $form.find("label.message[for=\"".concat($element.attr('id'), "\"]")).text(message);
        },
        remove: function remove($element, settings) {
          var $form = jQuery__default["default"]($element[0].form);
          var $inputErrorFieldClass = jQuery__default["default"](settings.input_tag).attr('class');
          var $inputErrorField = $element.closest(".".concat($inputErrorFieldClass.replace(/ /g, '.')));
          var $label = $form.find("label[for=\"".concat($element.attr('id'), "\"]:not(.message)"));
          var $labelErrorFieldClass = jQuery__default["default"](settings.label_tag).attr('class');
          var $labelErrorField = $label.closest(".".concat($labelErrorFieldClass.replace(/ /g, '.')));

          if ($inputErrorField[0]) {
            $inputErrorField.find("#".concat($element.attr('id'))).detach();
            $inputErrorField.replaceWith($element);
            $label.detach();
            $labelErrorField.replaceWith($label);
          }
        }
      }
    },
    patterns: {
      numericality: {
        default: /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/,
        only_integer: /^[+-]?\d+$/
      }
    },
    selectors: {
      inputs: ':input:not(button):not([type="submit"])[name]:visible:enabled',
      validate_inputs: ':input:enabled:visible[data-validate]',
      forms: 'form[data-client-side-validations]'
    },
    validators: {
      all: function all() {
        return jQuery__default["default"].extend({}, ClientSideValidations.validators.local, ClientSideValidations.validators.remote);
      },
      local: {},
      remote: {}
    },
    disable: function disable(target) {
      var $target = jQuery__default["default"](target);
      $target.off('.ClientSideValidations');

      if ($target.is('form')) {
        ClientSideValidations.disable($target.find(':input'));
      } else {
        $target.removeData(['changed', 'valid']);
        $target.filter(':input').each(function () {
          jQuery__default["default"](this).removeAttr('data-validate');
        });
      }
    },
    reset: function reset(form) {
      var $form = jQuery__default["default"](form);
      ClientSideValidations.disable(form);

      for (var key in form.ClientSideValidations.settings.validators) {
        form.ClientSideValidations.removeError($form.find("[name=\"".concat(key, "\"]")));
      }

      ClientSideValidations.enablers.form(form);
    },
    initializeOnEvent: function initializeOnEvent() {
      if (window.Turbo != null) {
        return 'turbo:load';
      } else if (window.Turbolinks != null && window.Turbolinks.supported) {
        return window.Turbolinks.EVENTS != null ? 'page:change' : 'turbolinks:load';
      }
    },
    start: function start() {
      var initializeOnEvent = ClientSideValidations.initializeOnEvent();

      if (initializeOnEvent != null) {
        jQuery__default["default"](document).on(initializeOnEvent, function () {
          return jQuery__default["default"](ClientSideValidations.selectors.forms).validate();
        });
      } else {
        jQuery__default["default"](function () {
          return jQuery__default["default"](ClientSideValidations.selectors.forms).validate();
        });
      }
    }
  };

  var arrayHasValue = function arrayHasValue(value, otherValues) {
    for (var i = 0, l = otherValues.length; i < l; i++) {
      if (value === otherValues[i]) {
        return true;
      }
    }

    return false;
  };
  var isValuePresent = function isValuePresent(value) {
    return !/^\s*$/.test(value || '');
  };

  var absenceLocalValidator = function absenceLocalValidator($element, options) {
    if (isValuePresent($element.val())) {
      return options.message;
    }
  };
  var presenceLocalValidator = function presenceLocalValidator($element, options) {
    if (!isValuePresent($element.val())) {
      return options.message;
    }
  };

  var DEFAULT_ACCEPT_OPTION = ['1', true];

  var isTextAccepted = function isTextAccepted(value, acceptOption) {
    if (!acceptOption) {
      acceptOption = DEFAULT_ACCEPT_OPTION;
    }

    if (Array.isArray(acceptOption)) {
      return arrayHasValue(value, acceptOption);
    }

    return value === acceptOption;
  };

  var acceptanceLocalValidator = function acceptanceLocalValidator($element, options) {
    var valid = true;

    if ($element.attr('type') === 'checkbox') {
      valid = $element.prop('checked');
    }

    if ($element.attr('type') === 'text') {
      valid = isTextAccepted($element.val(), options.accept);
    }

    if (!valid) {
      return options.message;
    }
  };

  var isMatching = function isMatching(value, regExpOptions) {
    return new RegExp(regExpOptions.source, regExpOptions.options).test(value);
  };

  var hasValidFormat = function hasValidFormat(value, withOptions, withoutOptions) {
    return withOptions && isMatching(value, withOptions) || withoutOptions && !isMatching(value, withoutOptions);
  };

  var formatLocalValidator = function formatLocalValidator($element, options) {
    var value = $element.val();

    if (options.allow_blank && !isValuePresent(value)) {
      return;
    }

    if (!hasValidFormat(value, options.with, options.without)) {
      return options.message;
    }
  };

  var VALIDATIONS$1 = {
    even: function even(a) {
      return parseInt(a, 10) % 2 === 0;
    },
    greater_than: function greater_than(a, b) {
      return parseFloat(a) > parseFloat(b);
    },
    greater_than_or_equal_to: function greater_than_or_equal_to(a, b) {
      return parseFloat(a) >= parseFloat(b);
    },
    equal_to: function equal_to(a, b) {
      return parseFloat(a) === parseFloat(b);
    },
    less_than: function less_than(a, b) {
      return parseFloat(a) < parseFloat(b);
    },
    less_than_or_equal_to: function less_than_or_equal_to(a, b) {
      return parseFloat(a) <= parseFloat(b);
    },
    odd: function odd(a) {
      return parseInt(a, 10) % 2 === 1;
    },
    other_than: function other_than(a, b) {
      return parseFloat(a) !== parseFloat(b);
    }
  };

  var getOtherValue = function getOtherValue(validationOption, $form) {
    if (!isNaN(parseFloat(validationOption))) {
      return validationOption;
    }

    var validationElement = $form.find("[name*=\"".concat(validationOption, "\"]"));

    if (validationElement.length === 1) {
      var numberFormat = $form[0].ClientSideValidations.settings.number_format;
      var otherFormattedValue = jQuery__default["default"].trim(validationElement.val()).replace(new RegExp("\\".concat(numberFormat.separator), 'g'), '.');

      if (!isNaN(parseFloat(otherFormattedValue))) {
        return otherFormattedValue;
      }
    }
  };

  var isValid = function isValid(validationFunction, validationOption, formattedValue, $form) {
    if (validationFunction.length === 2) {
      var otherValue = getOtherValue(validationOption, $form);
      return otherValue == null || otherValue === '' || validationFunction(formattedValue, otherValue);
    } else {
      return validationFunction(formattedValue);
    }
  };

  var runFunctionValidations = function runFunctionValidations(formattedValue, $form, options) {
    for (var validation in VALIDATIONS$1) {
      var validationOption = options[validation];
      var validationFunction = VALIDATIONS$1[validation]; // Must check for null because this could be 0

      if (validationOption == null) {
        continue;
      }

      if (!isValid(validationFunction, validationOption, formattedValue, $form)) {
        return options.messages[validation];
      }
    }
  };

  var runValidations$1 = function runValidations(formattedValue, $form, options) {
    if (options.only_integer && !ClientSideValidations.patterns.numericality.only_integer.test(formattedValue)) {
      return options.messages.only_integer;
    }

    if (!ClientSideValidations.patterns.numericality.default.test(formattedValue)) {
      return options.messages.numericality;
    }

    return runFunctionValidations(formattedValue, $form, options);
  };

  var numericalityLocalValidator = function numericalityLocalValidator($element, options) {
    var value = $element.val();

    if (options.allow_blank && !isValuePresent(value)) {
      return;
    }

    var $form = jQuery__default["default"]($element[0].form);
    var numberFormat = $form[0].ClientSideValidations.settings.number_format;
    var formattedValue = jQuery__default["default"].trim(value).replace(new RegExp("\\".concat(numberFormat.separator), 'g'), '.');
    return runValidations$1(formattedValue, $form, options);
  };

  var VALIDATIONS = {
    is: function is(a, b) {
      return a === parseInt(b, 10);
    },
    minimum: function minimum(a, b) {
      return a >= parseInt(b, 10);
    },
    maximum: function maximum(a, b) {
      return a <= parseInt(b, 10);
    }
  };

  var runValidations = function runValidations(valueLength, options) {
    for (var validation in VALIDATIONS) {
      var validationOption = options[validation];
      var validationFunction = VALIDATIONS[validation];

      if (validationOption && !validationFunction(valueLength, validationOption)) {
        return options.messages[validation];
      }
    }
  };

  var lengthLocalValidator = function lengthLocalValidator($element, options) {
    var value = $element.val();

    if (options.allow_blank && !isValuePresent(value)) {
      return;
    }

    return runValidations(value.length, options);
  };

  var isInList = function isInList(value, otherValues) {
    var normalizedOtherValues = [];

    for (var otherValueIndex in otherValues) {
      normalizedOtherValues.push(otherValues[otherValueIndex].toString());
    }

    return arrayHasValue(value, normalizedOtherValues);
  };

  var isInRange = function isInRange(value, range) {
    return value >= range[0] && value <= range[1];
  };

  var isIncluded = function isIncluded(value, options, allowBlank) {
    if ((options.allow_blank && !isValuePresent(value)) === allowBlank) {
      return true;
    }

    return options.in && isInList(value, options.in) || options.range && isInRange(value, options.range);
  };

  var exclusionLocalValidator = function exclusionLocalValidator($element, options) {
    var value = $element.val();

    if (isIncluded(value, options, false) || !options.allow_blank && !isValuePresent(value)) {
      return options.message;
    }
  };
  var inclusionLocalValidator = function inclusionLocalValidator($element, options) {
    var value = $element.val();

    if (!isIncluded(value, options, true)) {
      return options.message;
    }
  };

  var confirmationLocalValidator = function confirmationLocalValidator($element, options) {
    var value = $element.val();
    var confirmationValue = jQuery__default["default"]("#".concat($element.attr('id'), "_confirmation")).val();

    if (!options.case_sensitive) {
      value = value.toLowerCase();
      confirmationValue = confirmationValue.toLowerCase();
    }

    if (value !== confirmationValue) {
      return options.message;
    }
  };

  var isLocallyUnique = function isLocallyUnique(currentElement, value, otherValue, caseSensitive) {
    if (!caseSensitive) {
      value = value.toLowerCase();
      otherValue = otherValue.toLowerCase();
    }

    if (otherValue === value) {
      jQuery__default["default"](currentElement).data('notLocallyUnique', true);
      return false;
    }

    if (jQuery__default["default"](currentElement).data('notLocallyUnique')) {
      jQuery__default["default"](currentElement).removeData('notLocallyUnique').data('changed', true);
    }

    return true;
  };

  var uniquenessLocalValidator = function uniquenessLocalValidator($element, options) {
    var elementName = $element.attr('name');
    var matches = elementName.match(/^(.+_attributes\])\[\d+\](.+)$/);

    if (!matches) {
      return;
    }

    var $form = jQuery__default["default"]($element[0].form);
    var value = $element.val();
    var valid = true;
    $form.find(":input[name^=\"".concat(matches[1], "\"][name$=\"").concat(matches[2], "\"]")).not($element).each(function () {
      var otherValue = jQuery__default["default"](this).val();

      if (!isLocallyUnique(this, value, otherValue, options.case_sensitive)) {
        valid = false;
      }
    });

    if (!valid) {
      return options.message;
    }
  };

  ClientSideValidations.validators.local = {
    absence: absenceLocalValidator,
    presence: presenceLocalValidator,
    acceptance: acceptanceLocalValidator,
    format: formatLocalValidator,
    numericality: numericalityLocalValidator,
    length: lengthLocalValidator,
    inclusion: inclusionLocalValidator,
    exclusion: exclusionLocalValidator,
    confirmation: confirmationLocalValidator,
    uniqueness: uniquenessLocalValidator
  };

  jQuery__default["default"].fn.disableClientSideValidations = function () {
    ClientSideValidations.disable(this);
    return this;
  };

  jQuery__default["default"].fn.enableClientSideValidations = function () {
    var _this = this;

    var selectors = {
      forms: 'form',
      inputs: 'input'
    };

    var _loop = function _loop(selector) {
      var enablers = selectors[selector];

      _this.filter(ClientSideValidations.selectors[selector]).each(function () {
        ClientSideValidations.enablers[enablers](this);
      });
    };

    for (var selector in selectors) {
      _loop(selector);
    }

    return this;
  };

  jQuery__default["default"].fn.resetClientSideValidations = function () {
    this.filter(ClientSideValidations.selectors.forms).each(function () {
      ClientSideValidations.reset(this);
    });
    return this;
  };

  jQuery__default["default"].fn.validate = function () {
    this.filter(ClientSideValidations.selectors.forms).each(function () {
      jQuery__default["default"](this).enableClientSideValidations();
    });
    return this;
  };

  jQuery__default["default"].fn.isValid = function (validators) {
    var obj = jQuery__default["default"](this[0]);

    if (obj.is('form')) {
      return validateForm(obj, validators);
    } else {
      return validateElement(obj, validatorsFor(this[0].name, validators));
    }
  };

  var cleanNestedElementName = function cleanNestedElementName(elementName, nestedMatches, validators) {
    for (var validatorName in validators) {
      if (validatorName.match("\\[".concat(nestedMatches[1], "\\].*\\[\\]\\[").concat(nestedMatches[2], "\\]$"))) {
        elementName = elementName.replace(/\[[\da-z_]+\]\[(\w+)\]$/g, '[][$1]');
      }
    }

    return elementName;
  };

  var cleanElementName = function cleanElementName(elementName, validators) {
    elementName = elementName.replace(/\[(\w+_attributes)\]\[[\da-z_]+\](?=\[(?:\w+_attributes)\])/g, '[$1][]');
    var nestedMatches = elementName.match(/\[(\w+_attributes)\].*\[(\w+)\]$/);

    if (nestedMatches) {
      elementName = cleanNestedElementName(elementName, nestedMatches, validators);
    }

    return elementName;
  };

  var validatorsFor = function validatorsFor(elementName, validators) {
    if (Object.prototype.hasOwnProperty.call(validators, elementName)) {
      return validators[elementName];
    }

    return validators[cleanElementName(elementName, validators)] || {};
  };

  var validateForm = function validateForm($form, validators) {
    var valid = true;
    $form.trigger('form:validate:before.ClientSideValidations');
    $form.find(ClientSideValidations.selectors.validate_inputs).each(function () {
      if (!jQuery__default["default"](this).isValid(validators)) {
        valid = false;
      }

      return true;
    });

    if (valid) {
      $form.trigger('form:validate:pass.ClientSideValidations');
    } else {
      $form.trigger('form:validate:fail.ClientSideValidations');
    }

    $form.trigger('form:validate:after.ClientSideValidations');
    return valid;
  };

  var passElement = function passElement($element) {
    $element.trigger('element:validate:pass.ClientSideValidations').data('valid', null);
  };

  var failElement = function failElement($element, message) {
    $element.trigger('element:validate:fail.ClientSideValidations', message).data('valid', false);
  };

  var afterValidate = function afterValidate($element) {
    return $element.trigger('element:validate:after.ClientSideValidations').data('valid') !== false;
  };

  var executeValidator = function executeValidator(validatorFunctions, validatorFunction, validatorOptions, $element) {
    for (var validatorOption in validatorOptions) {
      if (!validatorOptions[validatorOption]) {
        continue;
      }

      var message = validatorFunction.call(validatorFunctions, $element, validatorOptions[validatorOption]);

      if (message) {
        failElement($element, message);
        return false;
      }
    }

    return true;
  };

  var executeValidators = function executeValidators(validatorFunctions, $element, validators) {
    for (var validator in validators) {
      if (!validatorFunctions[validator]) {
        continue;
      }

      if (!executeValidator(validatorFunctions, validatorFunctions[validator], validators[validator], $element)) {
        return false;
      }
    }

    return true;
  };

  var isMarkedForDestroy = function isMarkedForDestroy($element) {
    if ($element.attr('name').search(/\[([^\]]*?)\]$/) >= 0) {
      var destroyInputName = $element.attr('name').replace(/\[([^\]]*?)\]$/, '[_destroy]');

      if (jQuery__default["default"]("input[name=\"".concat(destroyInputName, "\"]")).val() === '1') {
        return true;
      }
    }

    return false;
  };

  var executeAllValidators = function executeAllValidators($element, validators) {
    if ($element.data('changed') === false || $element.prop('disabled')) {
      return;
    }

    $element.data('changed', false);

    if (executeValidators(ClientSideValidations.validators.all(), $element, validators)) {
      passElement($element);
    }
  };

  var validateElement = function validateElement($element, validators) {
    $element.trigger('element:validate:before.ClientSideValidations');

    if (isMarkedForDestroy($element)) {
      passElement($element);
    } else {
      executeAllValidators($element, validators);
    }

    return afterValidate($element);
  };

  if (!window.ClientSideValidations) {
    window.ClientSideValidations = ClientSideValidations;

    if (!isAMD() && !isCommonJS()) {
      ClientSideValidations.start();
    }
  }

  function isAMD() {
    return  true && __webpack_require__.amdO; // eslint-disable-line no-undef
  }

  function isCommonJS() {
    return ( false ? 0 : _typeof(exports)) === 'object' && "object" !== 'undefined'; // eslint-disable-line no-undef
  }

  return ClientSideValidations;

}));


/***/ }),

/***/ 18592:
/***/ (function(module) {

"use strict";
module.exports = $;

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, [2096,881], function() { return __webpack_exec__(6876); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);